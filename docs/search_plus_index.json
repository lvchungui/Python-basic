{"./":{"url":"./","title":"1 Python 简介","keywords":"","body":"1 Python 简介 1.1 Python 介绍 Python是时下最流行、最火爆的编程语言之一，具体原因如下： 简单、易学，适应人群广泛 免费、开源 应用领域广泛 以下知名框架均是Python语言开发 Google开源机器学习框架：TensorFlow 开源社区主推学习框架：Scikit-learn 百度开源深度学习框架：Paddle 1.2 Python 版本 Python 2.X Python 3.X Python 3.5 Python 3.6 Python 3.7 1.3 Python 注释 单行注释 # 注释内容 多行注释 \"\"\" 第一行注释 第二行注释 第三行注释 \"\"\" ''' 注释1 注释2 注释3 ''' 快捷键： ctrl + / "},"article/2-Python环境安装.html":{"url":"article/2-Python环境安装.html","title":"2 Python 环境安装","keywords":"","body":"2 Python 环境安装 2.1 Python 解释器 2.1.1 解释器的作用 Python解释器作用：运行文件 Python解释器种类 CPython：C语言开发的解释器(官方)，应用广泛的解释器 IPython：基于CPython的一种交互式解释器 其他解释器 PyPy：基于Python语言开发的解释器 Jython：运行在Java平台的解释器，直接把Python代码编译成Java字节码执行 IronPython：运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码 2.1.2 下载解释器 下载地址：https://www.python.org/downloads/release/python-372/ 单击上述链接→查找目标文件：Windows x86-64 executable installer →单击即可下载 2.1.3 安装解释器 选择在path中配置python3.6环境变量，然后尊则现在安装 等待程序安装 选择关闭 注意：如果第一步未选择Add python 3.6 to Path，则需要手动配置环境变量 手动配置环境变量步骤 右键点击此电脑，选择属性选项 选择高级系统设置 选择环境变量 选择用户变量中的Path变量，点击编辑 双击打开我的电脑，在搜索栏输入python.exe并搜索找到对应搜索结果，有点选择打开文件所在位置 赋值python文件所在位置的完整路径 回到环境变量，选择新建，并将刚才赋值的路径填入其中 再次点击新建，将刚才的路径粘贴到其中，并在结尾添加\\Scripts 使用windows + R键调出运行窗口，输入cmd命令，点击确定 在命令行中输入python，并回车，如果出现如图所示版本信息即为配置完成 2.2 PyCharm 2.2.1 PyCharm 的作用 PyCharm是一种Python IDE（集成开发环境），带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，内部集成的功能如下： Project管理 智能提示 语法高亮 代码跳转 调试代码 解释代码(解释器) 框架和库 ...... 2.2.2 PyCharm 下载 下载地址：http://www.jetbrains.com/pycharm/download/#section=windows 下载专业版 2.2.3 PyCharm 破解教程 破解文件下载：链接：https://pan.baidu.com/s/1zNjCkSgYQ9q1Fk5IL1AonA?pwd=p55x 破解教程：https://www.exception.site/essay/how-to-free-use-pycharm-2020 设置中文：https://www.zcscl.com/p/5869.html 关闭自动更新：https://www.csdn.net/tags/MtTaAg3sNTA5NDM3LWJsb2cO0O0O.html 新建项目：https://blog.csdn.net/lehocat/article/details/123579981 "},"article/3-变量.html":{"url":"article/3-变量.html","title":"3 变量","keywords":"","body":"3 变量 3.1 认识变量 程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量 变量就是一个存储数据的的时候当前数据所在的内存地址的名字而已 3.2 定义变量 变量名自定义，要满足标识符命名规则 变量名 = 值 标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下： 由数字、字母、下划线组成 不能数字开头 不能使用内置关键字 严格区分大小写 内置关键字 False None True and as assert break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield 命名习惯 见名知义 大驼峰：即每个单词首字母都大写，例如：MyName 小驼峰：第二个（含）以后的单词首字母大写，例如：myName 下划线：例如：my_name 3.3 使用变量 my_name = 'TOM' print(my_name) schoolName = '江西理工大学' print(schoolName) "},"article/4-数据类型.html":{"url":"article/4-数据类型.html","title":"4 数据类型","keywords":"","body":"4 数据类型 4.1 认识数据类型 在 Python 里为了应对不同的业务需求，也把数据分为不同的类型 检测数据类型的方法：type() a = 1 print(type(a)) # -- 整型 b = 1.1 print(type(b)) # -- 浮点型 c = True print(type(c)) # -- 布尔型 d = '12345' print(type(d)) # -- 字符串 e = [10, 20, 30] print(type(e)) # -- 列表 f = (10, 20, 30) print(type(f)) # -- 元组 h = {10, 20, 30} print(type(h)) # -- 集合 g = {'name': 'TOM', 'age': 20} print(type(g)) # -- 字典 4.2 数据类型转换 转换数据类型的函数 函数 说明 int(x [,base ]) 将x转换为一个整数 float(x) 将x转换为一个浮点数 complex(real [,imag ]) 创建一个复数，real为实部，imag为虚部 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 chr(x) 将一个整数转换为一个Unicode字符 ord(x) 将一个字符转换为它的ASCII整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 bin(x) 将一个整数转换为一个二进制字符串 # 1. float() -- 转换成浮点型 num1 = 1 print(float(num1)) print(type(float(num1))) # 2. str() -- 转换成字符串类型 num2 = 10 print(type(str(num2))) # 3. tuple() -- 将一个序列转换成元组 list1 = [10, 20, 30] print(tuple(list1)) print(type(tuple(list1))) # 4. list() -- 将一个序列转换成列表 t1 = (100, 200, 300) print(list(t1)) print(type(list(t1))) # 5. eval() -- 将字符串中的数据转换成Python表达式原本类型 str1 = '10' str2 = '[1, 2, 3]' str3 = '(1000, 2000, 3000)' print(type(eval(str1))) print(type(eval(str2))) print(type(eval(str3))) "},"article/5-输入.html":{"url":"article/5-输入.html","title":"5 输入","keywords":"","body":"5 输入 输入的语法 input(\"提示信息\") 输入的特点 当程序执行到input，等待用户输入，输入完成之后才继续向下执行 在Python中，input接收用户输入后，一般存储到变量，方便使用 在Python中，input会把接收到的任意用户输入的数据都当做字符串处理 password = input('请输入您的密码：') print(f'您输入的密码是{password}') # print(type(password)) 控制台输出结果如下： "},"article/6-输出.html":{"url":"article/6-输出.html","title":"6 输出","keywords":"","body":"6 输出 6.1 格式化输出 所谓的格式化输出即按照一定的格式输出内容 格式符号 转换 %s 字符串 %d 有符号的十进制整数 %f 浮点数 %c 字符 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写ox） %X 十六进制整数（大写OX） %e 科学计数法（小写'e'） %E 科学计数法（大写'E'） %g %f和%e的简写 %G %f和%E的简写 %06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出 %.2f，表示小数点后显示的小数位数 6.2 f-字符串 格式化字符串除了%s，还可以写为f'{表达式}' age = 18 name = 'TOM' weight = 75.5 student_id = 1 # 我的名字是TOM print('我的名字是%s' % name) # 我的学号是0001 print('我的学号是%4d' % student_id) # 我的体重是75.50公斤 print('我的体重是%.2f公斤' % weight) # 我的名字是TOM，今年18岁了 print('我的名字是%s，今年%d岁了' % (name, age)) # 我的名字是TOM，明年19岁了 print('我的名字是%s，明年%d岁了' % (name, age + 1)) # 我的名字是TOM，明年19岁了 print(f'我的名字是{name}, 明年{age + 1}岁了') f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读 6.3 转义字符 \\n：换行 \\t：制表符，一个tab键（4个空格）的距离 6.4 结束符 想一想，为什么两个print会换行输出？ print('输出的内容', end=\"\\n\") 在Python中，print()， 默认自带end=\"\\n\"这个换行结束符，所以导致每两个print直接会换行展示，用户可以按需求更改结束符 print('hello', end=\"\\n\") print('world', end=\"\\t\") # end结束符可以自定义 print('hello', end=\"...\") print('Python') "},"article/7-运算符.html":{"url":"article/7-运算符.html","title":"7 运算符","keywords":"","body":"7 运算符 7.1 算数运算符 运算符 描述 实例 + 加 1 + 1 输出结果为 2 - 减 1-1 输出结果为 0 * 乘 2 * 2 输出结果为 4 / 除 10 / 2 输出结果为 5 // 整除 9 // 4 输出结果为2 % 取余 9 % 4 输出结果为 1 ** 指数 2**4 输出结果为 16，即 2*2*2*2 () 小括号 小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9 混合运算优先级顺序：()高于 ** 高于 * / // % 高于 + - 7.2 赋值运算符 运算符 描述 实例 = 赋值 将=右侧的结果赋值给等号左侧的变量 单个变量赋值 num = 1 print(num) 多个变量赋值 num1, float1, str1 = 10, 0.5, 'hello world' print(num1) print(float1) print(str1) 多变量赋相同值 a = b = 10 print(a) print(b) 7.3 复合赋值运算符 运算符 描述 实例 += 加法赋值运算符 c += a 等价于 c = c + a -= 减法赋值运算符 c -= a 等价于 c = c- a *= 乘法赋值运算符 c = a 等价于 c = c a /= 除法赋值运算符 c /= a 等价于 c = c / a //= 整除赋值运算符 c //= a 等价于 c = c // a %= 取余赋值运算符 c %= a 等价于 c = c % a **= 幂赋值运算符 c = a 等价于 c = c a a = 100 a += 1 # 输出101 a = a + 1,最终a = 100 + 1 print(a) b = 2 b *= 3 # 输出6 b = b * 3,最终b = 2 * 3 print(b) c = 10 c += 1 + 2 # 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3 print(c) 7.4 比较运算符 比较运算符也叫关系运算符， 通常用来判断 运算符 描述 实例 == 判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False) 如a=3,b=3，则（a == b) 为 True != 不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False) 如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True > 运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假 如a=7,b=3，则(a > b) 为 True 运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假 如a=7,b=3，则(a >= 运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假 如a=7,b=3，则(a = b) 为 True 运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假 如a=3,b=3，则(a a = 7 b = 5 print(a == b) # False print(a != b) # True print(a b) # True print(a = b) # True 7.5 逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔\"与\"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 True and False， 返回 False。 or x or y 布尔\"或\"：如果 x 是 True，它返回 True，否则它返回 y 的值。 False or True， 返回 True。 not not x 布尔\"非\"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not True 返回 False, not False 返回 True 表达式的逻辑运算 a = 1 b = 2 c = 3 print((a b) and (b b) or (b b)) # True 数字之间的逻辑运算 a = 0 b = 1 c = 2 # and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字 print(a and b) # 0 print(b and a) # 0 print(a and c) # 0 print(c and a) # 0 print(b and c) # 2 print(c and b) # 1 # or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字 print(a or b) # 1 print(a or c) # 2 print(b or c) # 1 "},"article/8-判断语句.html":{"url":"article/8-判断语句.html","title":"8 判断语句","keywords":"","body":"8 判断语句 8.1 if 语句 if语句是用来进行判断的，其使用格式如下： if 要判断的条件: 条件成立时，要做的事情 8.2 if...else 语句 if...else 语句使用格式如下： if 条件: 满足条件时要做的事情1 满足条件时要做的事情2 满足条件时要做的事情3 ...(省略)... else: 不满足条件时要做的事情1 不满足条件时要做的事情2 不满足条件时要做的事情3 ...(省略)... 8.3 if...elif...else 语句 if...elif...else使用格式如下： if xxx1: 事情1 elif xxx2: 事情2 elif xxx3: 事情3 else: 事情4 8.4 if 嵌套 if嵌套的格式 if 条件1: 满足条件1 做的事情1 满足条件1 做的事情2 if 条件2: 满足条件2 做的事情1 满足条件2 做的事情2 8.5 应用：猜拳游戏 需求 从控制台输⼊要出的拳 —— ⽯头（1）／剪⼑（2）／布（3） 电脑随机出拳 —— 先假定电脑只会出⽯头，完成整体代码功能 ⽐较胜负 实现代码： import random player = input('请输入：剪刀(0) 石头(1) 布(2):') player = int(player) # 产生随机整数：0、1、2 中的某一个 computer = random.randint(0,2) # 用来进行测试 #print('player=%d,computer=%d',(player,computer)) if ((player == 0) and (computer == 2)) or ((player ==1) and (computer == 0)) or ((player == 2) and (computer == 1)): print('获胜，哈哈，你太厉害了') elif player == computer: print('平局，要不再来一局') else: print('输了，不要走，洗洗手接着来，决战到天亮') 随机数 在 Python 中，要使⽤随机数，⾸先需要导⼊ 随机数 的 模块 —— “⼯具包” import random 导⼊模块后，可以直接在 模块名称 后⾯敲⼀个 . 然后按 Tab 键，会提示该模块中包含的所有函数 random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b "},"article/9-循环语句.html":{"url":"article/9-循环语句.html","title":"9 循环语句","keywords":"","body":"9 循环语句 9.1 while 循环 while 循环的格式 while 条件: 条件满足时，做的事情1 条件满足时，做的事情2 条件满足时，做的事情3 ...(省略)... 9.2 for 循环 for 循环的格式 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 demo1 name = 'itheima' for x in name: print(x) 运行结果如下: i t h e i m a demo2 for x in name: print(x) if x == 'l': print(\"Hello world!\") 运行结果如下: h e l Hello world! l Hello world! o 9.3 break 和 continue 9.3.1 break for循环 普通的循环示例如下：name = 'itheima' for x in name: print('----') print(x) else: print(\"==for循环过程中，如果没有执行break退出，则执行本语句==\") 运行结果:---- i ---- t ---- h ---- e ---- i ---- m ---- a ==for循环过程中，如果没有break则执行== 带有break的循环示例如下:name = 'itheima' for x in name: print('----') if x == 'e': break print(x) else: print(\"==for循环过程中，如果没有执行break退出，则执行本语句==\") 运行结果:---- i ---- t ---- h ---- while循环 普通的循环示例如下：i = 0 while i 运行结果:---- 1 ---- 2 ---- 3 ---- 4 ---- 5 ==while循环过程中，如果没有break则执行== 带有break的循环示例如下:i = 0 while i 运行结果:---- 1 ---- 2 ---- 9.3.2 continue for循环 带有continue的循环示例如下:name = 'itheima' for x in name: print('----') if x == 'e': continue print(x) else: print(\"==while循环过程中，如果没有break则执行==\") 运行结果:---- i ---- t ---- h ---- ---- i ---- m ---- a ==while循环过程中，如果没有break则执行== while循环 带有continue的循环示例如下:i = 0 while i 运行结果:---- 1 ---- 2 ---- ---- 4 ---- 5 9.3.3 小结 continue的作用：用来结束本次循环，紧接着执行下一次的循环 循环可以和else配合使用，else下方缩进的代码指的是当循环正常结束之后要执行的代码 所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行 因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码 注意点： break/continue只能用在循环中，除此以外不能单独使用 break/continue在嵌套循环中，只对最近的一层循环起作用 else while和for都可以配合else使用 else下方缩进的代码含义：当循环正常结束后执行的代码 break终止循环不会执行else下方缩进的代码 continue退出循环的方式执行else下方缩进的代码 9.4 循环嵌套 while 循环嵌套格式 while 条件1: 条件1满足时，做的事情1 条件1满足时，做的事情2 条件1满足时，做的事情3 ...(省略)... while 条件2: 条件2满足时，做的事情1 条件2满足时，做的事情2 条件2满足时，做的事情3 ...(省略)... for 循环嵌套格式 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 "},"article/10-字符串.html":{"url":"article/10-字符串.html","title":"10 字符串","keywords":"","body":"10 字符串 10.1 认识字符串 字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可 一对引号字符串 name1 = 'Tom' name2 = \"Rose\" 三引号字符串串 name3 = ''' Tom ''' name4 = \"\"\" Rose \"\"\" a = ''' i am Tom, nice to meet you! ''' b = \"\"\" i am Rose, nice to meet you! \"\"\" 三引号形式的字符串支持换行 思考：如果创建一个字符串I'm Tom? c = \"I'm Tom\" d = 'I\\'m Tom' 10.2 字符串的输出 格式化操作符 name = '君哥' position = '讲师' address = '北京市' print('--------------------------------------------------') print(\"姓名：%s\" % name) print(\"职位：%s\" % position) print(\"公司地址：%s\" % address) print('--------------------------------------------------') f-strings f-strings 提供一种简洁易读的方式, 可以在字符串中包含 Python 表达式. f-strings 以字母 'f' 或 'F' 为前缀, 格式化字符串使用一对单引号、双引号、三单引号、三双引号. 格式化字符串中 name = '小明' age = 33 format_string1 = f'我的名字是 {name}, 我的年龄是 {age}' format_string2 = f\"我的名字是 {name}, 我的年龄是 {age}\" format_string3 = F'''我的名字是 {name}, 我的年龄是 {age}''' format_string4 = F\"\"\"我的名字是 {name}, 我的年龄是 {age}\"\"\" format_string5 = f'3 + 5 = {3 + 5}' a = 10 b = 20 format_string6 = f'3 + 5 = {a + b}' print(format_string1) print(format_string2) print(format_string3) print(format_string4) print(format_string5) print(format_string6) 10.3 字符串的输入 之前在学习input的时候，通过它能够完成从键盘获取数据，然后保存到指定的变量中 注意：input获取的数据，都以字符串的方式进行保存，即使输入的是数字，那么也是以字符串方式保存 10.4 下标和切片 10.4.1 下标 所谓“下标”，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间，列表与元组支持下标索引好理解，字符串实际上就是字符的数组，所以也支持下标索引 如果想取出部分字符，那么可以通过下标的方法，（注意python中下标从 0 开始） name = 'abcdef' print(name[0]) print(name[1]) print(name[2]) 10.4.2 切片 切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作 切片的语法：[起始:结束:步长] 注意：选取的区间从\"起始\"位开始，到\"结束\"位的前一位结束（不包含结束位本身)，步长表示选取间隔 # 序列名[开始位置的下标:结束位置的下标:步长] str1 = '012345678' print(str1[2:5:1]) # 234 print(str1[2:5:2]) # 24 print(str1[2:5]) # 234 print(str1[:5]) # 01234 -- 如果不写开始，默认从0开始选取 print(str1[2:]) # 2345678 -- 如果不写结束，表示选取到最后 print(str1[:]) # 012345678 -- 如果不写开始和结束，表示选取所有 # 负数测试 print(str1[::-1]) # 876543210 -- 如果步长为负数，表示倒叙选取 print(str1[-4:-1]) # 567 -- 下标-1表示最后一个数据，依次向前类推 # 终极测试 print(str1[-4:-1:1]) # 567 print(str1[-4:-1:-1]) # 不能选取出数据：从-4开始到-1结束，选取方向为从左到右，但是-1步长：从右向左选取 # **** 如果选取方向(下标开始到结束的方向) 和 步长的方向冲突，则无法选取数据 print(str1[-1:-4:-1]) # 876 10.5 字符串的操作 10.5.1 查找 mystr = \"hello world and itcast and itheima and Python\" find 作用：检测 str 是否包含在 mystr 中，如果是返回开始的索引值，否则返回-1 语法：字符串序列.find(子串, 开始位置下标, 结束位置下标) 示例： print(mystr.find('and')) # 12 print(mystr.find('and', 15, 30)) # 23 print(mystr.find('ands')) # -1 , ands子串不存在 rfind 作用：类似于 find() 函数，不过是从右边开始查找 语法：字符串序列.rfind(子串, 开始位置下标, 结束位置下标) index 作用：跟 find() 方法一样，只不过如果str不在 mystr中会报一个异常 语法：字符串序列.index(子串, 开始位置下标, 结束位置下标) 示例： print(mystr.index('and')) # 12 print(mystr.index('and', 15, 30)) # 23 print(mystr.index('ands')) # 如果index查找子串不存在，报错 rindex 作用：类似于 index() 函数，不过是从右边开始查找 语法：字符串序列.rindex(子串, 开始位置下标, 结束位置下标) count 作用：返回 str在start和end之间 在 mystr里面出现的次数 语法：字符串序列.count(子串, 开始位置下标, 结束位置下标) 示例： print(mystr.count('and', 15, 30)) # 1 print(mystr.count('and')) # 3 print(mystr.count('ands')) # 0 10.5.2 修改 mystr = \"hello world and itcast and itheima and Python\" replace 作用：把 mystr 中的 str1 替换成 str2 ,如果 count 指定，则替换不超过 count ，replace函数有返回值，返回值是修改后的字符串 语法：字符串序列.replace(旧子串, 新子串, 替换次数) 示例： new_str = mystr.replace('and', 'he') # hello world he itcast he itheima he Python new_str = mystr.replace('and', 'he', 1) # hello world he itcast and itheima and Python # 替换次数如果超出子串出现的次数，表示替换所有这个子串 new_str = mystr.replace('and', 'he', 10) # hello world he itcast he itheima he Python print(mystr) # hello world and itcast and itheima and Python print(new_str) split 作用：以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串，返回一个列表, 丢失分割字符 语法：字符串序列.split(分割字符, num) 示例：list1 = mystr.split('and') # ['hello world ', ' itcast ', ' itheima ', ' Python'] list1 = mystr.split('and', 2) # ['hello world ', ' itcast ', ' itheima and Python'] print(list1) splitlines 作用：按照行分隔，返回一个包含各行作为元素的列表 语法：字符串序列.splitlines() partition 作用：把mystr以str分割成三部分,str前，str和str后 语法：字符串序列.partition(str) rpartition 作用：类似于 partition()函数,不过是从右边开始 语法：字符串序列.rpartition(str) join 作用：mystr 中每个元素后面插入str,构造出一个新的字符串 语法：字符或子串.join(多字符串组成的序列) 示例： mylist = ['aa', 'bb', 'cc'] str = ' ' str1 = '_' new_str = str.join(mylist) # aa bb cc new_str1 = str1.join(mylist) # aa_bb_cc print(new_str) print(new_str1) capitalize 作用：字符串首字母大写 语法：字符串序列.capitalize() title 作用：字符串中每个单词首字母大写 语法：字符串序列.title() upper 作用：字符串内容全部小写转大写 语法：字符串序列.upper() lower 作用：字符串内容全部大写转小写 语法：字符串序列.lower() lstrip 作用：删除字符串左侧空白字符 语法：字符串序列.lstrip() rstrip 作用：删除字符串右侧空白字符 语法：字符串序列.rstrip() strip 作用：删除字符串两侧空白字符 语法：字符串序列.strip() ljust 作用：返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 语法：字符串序列.ljust(width) rjust 作用：返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 语法：字符串序列.rjust(width) center 作用：返回一个原字符串居中对齐,并使用空格填充至长度 width 的新字符串 语法：字符串序列.center(width) 10.5.3 判断 mystr = \"hello world and itcast and itheima and Python\" startswith 作用：检查字符串是否是以某个子串开头, 是则返回 True，否则返回 False 语法：字符串序列.startswith(子串) endswith 作用：检查字符串是否是以某个子串结尾, 是则返回 True，否则返回 False 语法：字符串序列.endswith(子串) isalpha 作用：如果 mystr 所有字符都是字母，是则返回 True,否则返回 False 语法：字符串序列.isalpha() isdigit 作用：如果 mystr 所有字符都是数字，是则返回 True,否则返回 False 语法：字符串序列.isdigit() isalnum 作用：如果 mystr 所有字符都是数字或字母，是则返回 True,否则返回 False 语法：字符串序列.isalnum() isspace 作用：如果 mystr 所有字符都是空格，是则返回 True,否则返回 False 语法：字符串序列.isspace() "},"article/11-列表.html":{"url":"article/11-列表.html","title":"11 列表","keywords":"","body":"11 列表 11.1 列表介绍 列表的格式 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] 比C语言的数组强大的地方在于列表中的元素可以是不同类型的 testList = [1, 'a'] 打印列表 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] print(namesList[0]) print(namesList[1]) print(namesList[2]) 11.2 列表操作 11.2.1 增 append：通过append可以向列表添加元素 #定义变量A，默认有3个元素 A = ['xiaoWang','xiaoZhang','xiaoHua'] print(\"-----添加之前，列表A的数据-----\") for tempName in A: print(tempName) #提示、并添加元素 temp = input('请输入要添加的学生姓名:') A.append(temp) print(\"-----添加之后，列表A的数据-----\") for tempName in A: print(tempName) 列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据 如果append()追加的数据是一个序列，则追加整个序列到列表 name_list = ['Tom', 'Lily', 'Rose'] name_list.append(['xiaoming', 'xiaohong']) print(name_list) # 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']] extend：通过extend可以将另一个集合中的元素逐一添加到列表中 a = [1, 2] b = [3, 4] a.append(b) # [1, 2, [3, 4]] a.extend(b) # [1, 2, [3, 4], 3, 4] insert：insert(index, object) 在指定位置index前插入元素object a = [0, 1, 2] a.insert(1, 3) # [0, 3, 1, 2] 11.2.2 删 del：根据下标进行删除 movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) del movieName[2] #删除指定数据 # del movieName #删除列表 print('------删除之后------') for tempName in movieName: print(tempName) ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 指环王 霍比特人 速度与激情 pop：删除最后一个元素 movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) movieName.pop() print('------删除之后------') for tempName in movieName: print(tempName) ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 remove：根据元素的值进行删除 movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) movieName.remove('指环王') print('------删除之后------') for tempName in movieName: print(tempName) ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 第一滴血 霍比特人 速度与激情 11.2.3 改 #定义变量A，默认有3个元素 A = ['xiaoWang','xiaoZhang','xiaoHua'] print(\"-----修改之前，列表A的数据-----\") for tempName in A: print(tempName) #修改元素 A[1] = 'xiaoLu' print(\"-----修改之后，列表A的数据-----\") for tempName in A: print(tempName) ~~~py -----修改之前，列表A的数据----- xiaoWang xiaoZhang xiaoHua -----修改之后，列表A的数据----- xiaoWang xiaoLu xiaoHua 11.2.4 查 python中查找的常用方法为：① in（存在）,如果存在那么结果为true，否则为false； ② not in（不存在），如果不存在那么结果为true，否则false #待查找的列表 nameList = ['xiaoWang','xiaoZhang','xiaoHua'] #获取用户要查找的名字 findName = input('请输入要查找的姓名:') #查找是否存在 if findName in nameList: print('在字典中找到了相同的名字') else: print('没有找到') in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在 index：返回指定数据所在位置的下标 a = ['a', 'b', 'c', 'a', 'b'] a.index('a', 1, 3) # 注意是左闭右开区间 Traceback (most recent call last):File \"\", line 1, in ValueError: 'a' is not in list a.index('a', 1, 4) # 3 a.count('b') # 2 a.count('d') # 0 len()：访问列表长度，即列表中数据的个数 name_list = ['Tom', 'Lily', 'Rose'] print(len(name_list)) # 3 11.2.5 排序 sort, reverse sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小 reverse方法是将list逆置 a = [1, 4, 2, 3] a.reverse() # [3, 2, 4, 1] a.sort() # [1, 2, 3, 4] a.sort(reverse=True) # [4, 3, 2, 1] 11.2.6 复制 copy movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] movieName2 = movieName.copy() print(movieName2) 11.3 列表循环遍历 for 循环 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] for name in namesList: print(name) xiaoWang xiaoZhang xiaoHua while 循环 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] length = len(namesList) i = 0 while i xiaoWang xiaoZhang xiaoHua 11.4 列表嵌套 类似while循环的嵌套，列表也是支持嵌套的，一个列表中的元素又是一个列表，那么这就是列表的嵌套schoolNames = [['北京大学','清华大学'], ['南开大学','天津大学','天津师范大学'], ['山东大学','中国海洋大学']] 应用：一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配 import random # 定义一个列表用来保存3个办公室 offices = [[],[],[]] # 定义一个列表用来存储8位老师的名字 names = ['A','B','C','D','E','F','G','H'] i = 0 for name in names: index = random.randint(0,2) offices[index].append(name) i = 1 for tempNames in offices: print('办公室%d的人数为:%d'%(i,len(tempNames))) i+=1 for name in tempNames: print(\"%s\"%name,end='') print(\"\\n\") print(\"-\"*20) "},"article/12-元组.html":{"url":"article/12-元组.html","title":"12 元组","keywords":"","body":"12 元组 Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号 元组特点：定义元组使用小括号，且逗号隔开各个数据，数据可以是不同的数据类型 定义元组: aTuple = ('et',77,99.9) bTuple = (10,) 注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为这个数据的数据类型 # 单个数据的元组 t2 = (10,) print(type(t2)) # tuple # 如果单个数据的元组不加逗号 t3 = (10) print(type(t3)) # int 访问元组也是通过下标访问 python中不允许修改元组的数据，包括不能删除其中的元素；但是如果元组里面有列表，修改列表里面的数据则是支持的 tuple2 = (10, 20, ['aa', 'bb', 'cc'], 50, 30) print(tuple2[2]) # 访问到列表 # 结果：(10, 20, ['aaaaa', 'bb', 'cc'], 50, 30) tuple2[2][0] = 'aaaaa' print(tuple2) "}}