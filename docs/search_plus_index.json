{"./":{"url":"./","title":"1 Python 简介","keywords":"","body":"1 Python 简介 1.1 Python 介绍 Python是时下最流行、最火爆的编程语言之一，具体原因如下： 简单、易学，适应人群广泛 免费、开源 应用领域广泛 以下知名框架均是Python语言开发 Google开源机器学习框架：TensorFlow 开源社区主推学习框架：Scikit-learn 百度开源深度学习框架：Paddle 1.2 Python 版本 Python 2.X Python 3.X Python 3.5 Python 3.6 Python 3.7 "},"article/2-Python环境安装.html":{"url":"article/2-Python环境安装.html","title":"2 Python 环境安装","keywords":"","body":"2 Python 环境安装 2.1 Python 解释器 2.1.1 解释器的作用 Python解释器作用：运行文件 Python解释器种类 CPython：C语言开发的解释器(官方)，应用广泛的解释器 IPython：基于CPython的一种交互式解释器 其他解释器 PyPy：基于Python语言开发的解释器 Jython：运行在Java平台的解释器，直接把Python代码编译成Java字节码执行 IronPython：运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码 2.1.2 下载解释器 下载地址：https://www.python.org/downloads/release/python-372/ 单击上述链接→查找目标文件：Windows x86-64 executable installer →单击即可下载 2.1.3 安装解释器 选择在path中配置python3.6环境变量，然后尊则现在安装 等待程序安装 选择关闭 注意：如果第一步未选择Add python 3.6 to Path，则需要手动配置环境变量 手动配置环境变量步骤 右键点击此电脑，选择属性选项 选择高级系统设置 选择环境变量 选择用户变量中的Path变量，点击编辑 双击打开我的电脑，在搜索栏输入python.exe并搜索找到对应搜索结果，有点选择打开文件所在位置 赋值python文件所在位置的完整路径 回到环境变量，选择新建，并将刚才赋值的路径填入其中 再次点击新建，将刚才的路径粘贴到其中，并在结尾添加\\Scripts 使用windows + R键调出运行窗口，输入cmd命令，点击确定 在命令行中输入python，并回车，如果出现如图所示版本信息即为配置完成 2.2 PyCharm 2.2.1 PyCharm 的作用 PyCharm是一种Python IDE（集成开发环境），带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，内部集成的功能如下： Project管理 智能提示 语法高亮 代码跳转 调试代码 解释代码(解释器) 框架和库 ...... 2.2.2 PyCharm 下载 下载地址：http://www.jetbrains.com/pycharm/download/#section=windows 下载专业版 2.2.3 PyCharm 破解教程 破解文件下载：https://pan.baidu.com/s/1zNjCkSgYQ9q1Fk5IL1AonA?pwd=p55x 破解教程：https://www.exception.site/essay/how-to-free-use-pycharm-2020 设置中文：https://www.zcscl.com/p/5869.html 关闭自动更新：https://www.csdn.net/tags/MtTaAg3sNTA5NDM3LWJsb2cO0O0O.html 新建项目：https://blog.csdn.net/lehocat/article/details/123579981 "},"article/3-Python基础语法.html":{"url":"article/3-Python基础语法.html","title":"3 Python 基础语法","keywords":"","body":"3 Python 基础语法 3.1 注释 单行注释 # 注释内容 多行注释 \"\"\" 第一行注释 第二行注释 第三行注释 \"\"\" ''' 注释1 注释2 注释3 ''' 快捷键： ctrl + / 3.2 变量 3.2.1 认识变量 程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量 变量就是一个存储数据的的时候当前数据所在的内存地址的名字而已 3.2.2 定义变量 变量名自定义，要满足标识符命名规则 变量名 = 值 标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下： 由数字、字母、下划线组成 不能数字开头 不能使用内置关键字 严格区分大小写 内置关键字 False None True and as assert break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield 命名习惯 见名知义 大驼峰：即每个单词首字母都大写，例如：MyName 小驼峰：第二个（含）以后的单词首字母大写，例如：myName 下划线：例如：my_name 3.2.3 使用变量 my_name = 'TOM' print(my_name) schoolName = '江西理工大学' print(schoolName) 3.3 数据类型 3.3.1 认识数据类型 在 Python 里为了应对不同的业务需求，也把数据分为不同的类型 检测数据类型的方法：type() a = 1 print(type(a)) # -- 整型 b = 1.1 print(type(b)) # -- 浮点型 c = True print(type(c)) # -- 布尔型 d = '12345' print(type(d)) # -- 字符串 e = [10, 20, 30] print(type(e)) # -- 列表 f = (10, 20, 30) print(type(f)) # -- 元组 h = {10, 20, 30} print(type(h)) # -- 集合 g = {'name': 'TOM', 'age': 20} print(type(g)) # -- 字典 3.3.2 数据类型转换 转换数据类型的函数 函数 说明 int(x [,base ]) 将x转换为一个整数 float(x) 将x转换为一个浮点数 complex(real [,imag ]) 创建一个复数，real为实部，imag为虚部 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 chr(x) 将一个整数转换为一个Unicode字符 ord(x) 将一个字符转换为它的ASCII整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 bin(x) 将一个整数转换为一个二进制字符串 # 1. float() -- 转换成浮点型 num1 = 1 print(float(num1)) print(type(float(num1))) # 2. str() -- 转换成字符串类型 num2 = 10 print(type(str(num2))) # 3. tuple() -- 将一个序列转换成元组 list1 = [10, 20, 30] print(tuple(list1)) print(type(tuple(list1))) # 4. list() -- 将一个序列转换成列表 t1 = (100, 200, 300) print(list(t1)) print(type(list(t1))) # 5. eval() -- 将字符串中的数据转换成Python表达式原本类型 str1 = '10' str2 = '[1, 2, 3]' str3 = '(1000, 2000, 3000)' print(type(eval(str1))) print(type(eval(str2))) print(type(eval(str3))) 3.4 输入 输入的语法 input(\"提示信息\") 输入的特点 当程序执行到input，等待用户输入，输入完成之后才继续向下执行 在Python中，input接收用户输入后，一般存储到变量，方便使用 在Python中，input会把接收到的任意用户输入的数据都当做字符串处理 password = input('请输入您的密码：') print(f'您输入的密码是{password}') # print(type(password)) 控制台输出结果如下： 3.5 输出 3.5.1 格式化输出 所谓的格式化输出即按照一定的格式输出内容 格式符号 转换 %s 字符串 %d 有符号的十进制整数 %f 浮点数 %c 字符 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写ox） %X 十六进制整数（大写OX） %e 科学计数法（小写'e'） %E 科学计数法（大写'E'） %g %f和%e的简写 %G %f和%E的简写 %06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出 %.2f，表示小数点后显示的小数位数 3.5.2 f-字符串 格式化字符串除了%s，还可以写为f'{表达式}' age = 18 name = 'TOM' weight = 75.5 student_id = 1 # 我的名字是TOM print('我的名字是%s' % name) # 我的学号是0001 print('我的学号是%4d' % student_id) # 我的体重是75.50公斤 print('我的体重是%.2f公斤' % weight) # 我的名字是TOM，今年18岁了 print('我的名字是%s，今年%d岁了' % (name, age)) # 我的名字是TOM，明年19岁了 print('我的名字是%s，明年%d岁了' % (name, age + 1)) # 我的名字是TOM，明年19岁了 print(f'我的名字是{name}, 明年{age + 1}岁了') f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读 3.5.3 转义字符 \\n：换行 \\t：制表符，一个tab键（4个空格）的距离 3.5.4 结束符 想一想，为什么两个print会换行输出？ print('输出的内容', end=\"\\n\") 在Python中，print()， 默认自带end=\"\\n\"这个换行结束符，所以导致每两个print直接会换行展示，用户可以按需求更改结束符 print('hello', end=\"\\n\") print('world', end=\"\\t\") # end结束符可以自定义 print('hello', end=\"...\") print('Python') 3.6 运算符 3.6.1 算数运算符 运算符 描述 实例 + 加 1 + 1 输出结果为 2 - 减 1-1 输出结果为 0 * 乘 2 * 2 输出结果为 4 / 除 10 / 2 输出结果为 5 // 整除 9 // 4 输出结果为2 % 取余 9 % 4 输出结果为 1 ** 指数 2**4 输出结果为 16，即 2*2*2*2 () 小括号 小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9 混合运算优先级顺序：()高于 ** 高于 * / // % 高于 + - 3.6.2 赋值运算符 运算符 描述 实例 = 赋值 将=右侧的结果赋值给等号左侧的变量 单个变量赋值 num = 1 print(num) 多个变量赋值 num1, float1, str1 = 10, 0.5, 'hello world' print(num1) print(float1) print(str1) 多变量赋相同值 a = b = 10 print(a) print(b) 3.6.3 复合赋值运算符 运算符 描述 实例 += 加法赋值运算符 c += a 等价于 c = c + a -= 减法赋值运算符 c -= a 等价于 c = c- a *= 乘法赋值运算符 c = a 等价于 c = c a /= 除法赋值运算符 c /= a 等价于 c = c / a //= 整除赋值运算符 c //= a 等价于 c = c // a %= 取余赋值运算符 c %= a 等价于 c = c % a **= 幂赋值运算符 c = a 等价于 c = c a a = 100 a += 1 # 输出101 a = a + 1,最终a = 100 + 1 print(a) b = 2 b *= 3 # 输出6 b = b * 3,最终b = 2 * 3 print(b) c = 10 c += 1 + 2 # 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3 print(c) 3.6.4 比较运算符 比较运算符也叫关系运算符， 通常用来判断 运算符 描述 实例 == 判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False) 如a=3,b=3，则（a == b) 为 True != 不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False) 如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True > 运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假 如a=7,b=3，则(a > b) 为 True 运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假 如a=7,b=3，则(a >= 运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假 如a=7,b=3，则(a = b) 为 True 运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假 如a=3,b=3，则(a a = 7 b = 5 print(a == b) # False print(a != b) # True print(a b) # True print(a = b) # True 3.6.5 逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔\"与\"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 True and False， 返回 False。 or x or y 布尔\"或\"：如果 x 是 True，它返回 True，否则它返回 y 的值。 False or True， 返回 True。 not not x 布尔\"非\"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not True 返回 False, not False 返回 True 表达式的逻辑运算 a = 1 b = 2 c = 3 print((a b) and (b b) or (b b)) # True 数字之间的逻辑运算 a = 0 b = 1 c = 2 # and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字 print(a and b) # 0 print(b and a) # 0 print(a and c) # 0 print(c and a) # 0 print(b and c) # 2 print(c and b) # 1 # or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字 print(a or b) # 1 print(a or c) # 2 print(b or c) # 1 3.6.6 三目运算符 语法：条件成立执行的表达式 if 条件 else 条件不成立执行的表达式 a = 1 b = 2 c = a if a > b else b print(c) # 2 # 需求： 有两个变量，比较大小 如果变量1 大于 变量2 执行 变量 1 - 变量2； 否则 变量2 - 变量1 aa = 10 bb = 6 cc = aa - bb if aa > bb else bb - aa print(cc) # 4 "},"article/4-判断语句.html":{"url":"article/4-判断语句.html","title":"4 判断语句","keywords":"","body":"4 判断语句 4.1 if 语句 if语句是用来进行判断的，其使用格式如下： if 要判断的条件: 条件成立时，要做的事情 4.2 if...else 语句 if...else 语句使用格式如下： if 条件: 满足条件时要做的事情1 满足条件时要做的事情2 满足条件时要做的事情3 ...(省略)... else: 不满足条件时要做的事情1 不满足条件时要做的事情2 不满足条件时要做的事情3 ...(省略)... 4.3 if...elif...else 语句 if...elif...else使用格式如下： if xxx1: 事情1 elif xxx2: 事情2 elif xxx3: 事情3 else: 事情4 4.4 if 嵌套 if嵌套的格式 if 条件1: 满足条件1 做的事情1 满足条件1 做的事情2 if 条件2: 满足条件2 做的事情1 满足条件2 做的事情2 4.5 应用：猜拳游戏 需求 从控制台输⼊要出的拳 —— ⽯头（1）／剪⼑（2）／布（3） 电脑随机出拳 —— 先假定电脑只会出⽯头，完成整体代码功能 ⽐较胜负 实现代码： import random player = input('请输入：剪刀(0) 石头(1) 布(2):') player = int(player) # 产生随机整数：0、1、2 中的某一个 computer = random.randint(0,2) # 用来进行测试 #print('player=%d,computer=%d',(player,computer)) if ((player == 0) and (computer == 2)) or ((player ==1) and (computer == 0)) or ((player == 2) and (computer == 1)): print('获胜，哈哈，你太厉害了') elif player == computer: print('平局，要不再来一局') else: print('输了，不要走，洗洗手接着来，决战到天亮') 随机数 在 Python 中，要使⽤随机数，⾸先需要导⼊ 随机数 的 模块 —— “⼯具包” import random 导⼊模块后，可以直接在 模块名称 后⾯敲⼀个 . 然后按 Tab 键，会提示该模块中包含的所有函数 random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b "},"article/5-循环语句.html":{"url":"article/5-循环语句.html","title":"5 循环语句","keywords":"","body":"5 循环语句 5.1 while 循环 while 循环的格式 while 条件: 条件满足时，做的事情1 条件满足时，做的事情2 条件满足时，做的事情3 ...(省略)... 5.2 for 循环 for 循环的格式 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 demo1 name = 'itheima' for x in name: print(x) 运行结果如下: i t h e i m a demo2 for x in name: print(x) if x == 'l': print(\"Hello world!\") 运行结果如下: h e l Hello world! l Hello world! o 5.3 break 和 continue 5.3.1 break for循环 普通的循环示例如下：name = 'itheima' for x in name: print('----') print(x) else: print(\"==for循环过程中，如果没有执行break退出，则执行本语句==\") 运行结果:---- i ---- t ---- h ---- e ---- i ---- m ---- a ==for循环过程中，如果没有break则执行== 带有break的循环示例如下:name = 'itheima' for x in name: print('----') if x == 'e': break print(x) else: print(\"==for循环过程中，如果没有执行break退出，则执行本语句==\") 运行结果:---- i ---- t ---- h ---- while循环 普通的循环示例如下：i = 0 while i 运行结果:---- 1 ---- 2 ---- 3 ---- 4 ---- 5 ==while循环过程中，如果没有break则执行== 带有break的循环示例如下:i = 0 while i 运行结果:---- 1 ---- 2 ---- 5.3.2 continue for循环 带有continue的循环示例如下:name = 'itheima' for x in name: print('----') if x == 'e': continue print(x) else: print(\"==while循环过程中，如果没有break则执行==\") 运行结果:---- i ---- t ---- h ---- ---- i ---- m ---- a ==while循环过程中，如果没有break则执行== while循环 带有continue的循环示例如下:i = 0 while i 运行结果:---- 1 ---- 2 ---- ---- 4 ---- 5 5.3.3 小结 continue的作用：用来结束本次循环，紧接着执行下一次的循环 循环可以和else配合使用，else下方缩进的代码指的是当循环正常结束之后要执行的代码 所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行 因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码 注意点： break/continue只能用在循环中，除此以外不能单独使用 break/continue在嵌套循环中，只对最近的一层循环起作用 else while和for都可以配合else使用 else下方缩进的代码含义：当循环正常结束后执行的代码 break终止循环不会执行else下方缩进的代码 continue退出循环的方式执行else下方缩进的代码 5.4 循环嵌套 while 循环嵌套格式 while 条件1: 条件1满足时，做的事情1 条件1满足时，做的事情2 条件1满足时，做的事情3 ...(省略)... while 条件2: 条件2满足时，做的事情1 条件2满足时，做的事情2 条件2满足时，做的事情3 ...(省略)... for 循环嵌套格式 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 "},"article/6-字符串.html":{"url":"article/6-字符串.html","title":"6 字符串","keywords":"","body":"6 字符串 6.1 认识字符串 字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可 一对引号字符串 name1 = 'Tom' name2 = \"Rose\" 三引号字符串串 name3 = ''' Tom ''' name4 = \"\"\" Rose \"\"\" a = ''' i am Tom, nice to meet you! ''' b = \"\"\" i am Rose, nice to meet you! \"\"\" 三引号形式的字符串支持换行 思考：如果创建一个字符串I'm Tom? c = \"I'm Tom\" d = 'I\\'m Tom' 6.2 字符串的输出 格式化操作符 name = '君哥' position = '讲师' address = '北京市' print('--------------------------------------------------') print(\"姓名：%s\" % name) print(\"职位：%s\" % position) print(\"公司地址：%s\" % address) print('--------------------------------------------------') f-strings f-strings 提供一种简洁易读的方式, 可以在字符串中包含 Python 表达式. f-strings 以字母 'f' 或 'F' 为前缀, 格式化字符串使用一对单引号、双引号、三单引号、三双引号. 格式化字符串中 name = '小明' age = 33 format_string1 = f'我的名字是 {name}, 我的年龄是 {age}' format_string2 = f\"我的名字是 {name}, 我的年龄是 {age}\" format_string3 = F'''我的名字是 {name}, 我的年龄是 {age}''' format_string4 = F\"\"\"我的名字是 {name}, 我的年龄是 {age}\"\"\" format_string5 = f'3 + 5 = {3 + 5}' a = 10 b = 20 format_string6 = f'3 + 5 = {a + b}' print(format_string1) print(format_string2) print(format_string3) print(format_string4) print(format_string5) print(format_string6) 6.3 字符串的输入 之前在学习input的时候，通过它能够完成从键盘获取数据，然后保存到指定的变量中 注意：input获取的数据，都以字符串的方式进行保存，即使输入的是数字，那么也是以字符串方式保存 6.4 下标和切片 6.4.1 下标 所谓“下标”，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间，列表与元组支持下标索引好理解，字符串实际上就是字符的数组，所以也支持下标索引 如果想取出部分字符，那么可以通过下标的方法，（注意python中下标从 0 开始） name = 'abcdef' print(name[0]) print(name[1]) print(name[2]) 6.4.2 切片 切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作 切片的语法：[起始:结束:步长] 注意：选取的区间从\"起始\"位开始，到\"结束\"位的前一位结束（不包含结束位本身)，步长表示选取间隔 # 序列名[开始位置的下标:结束位置的下标:步长] str1 = '012345678' print(str1[2:5:1]) # 234 print(str1[2:5:2]) # 24 print(str1[2:5]) # 234 print(str1[:5]) # 01234 -- 如果不写开始，默认从0开始选取 print(str1[2:]) # 2345678 -- 如果不写结束，表示选取到最后 print(str1[:]) # 012345678 -- 如果不写开始和结束，表示选取所有 # 负数测试 print(str1[::-1]) # 876543210 -- 如果步长为负数，表示倒叙选取 print(str1[-4:-1]) # 567 -- 下标-1表示最后一个数据，依次向前类推 # 终极测试 print(str1[-4:-1:1]) # 567 print(str1[-4:-1:-1]) # 不能选取出数据：从-4开始到-1结束，选取方向为从左到右，但是-1步长：从右向左选取 # **** 如果选取方向(下标开始到结束的方向) 和 步长的方向冲突，则无法选取数据 print(str1[-1:-4:-1]) # 876 6.5 字符串的操作 6.5.1 查找 mystr = \"hello world and itcast and itheima and Python\" find 作用：检测 str 是否包含在 mystr 中，如果是返回开始的索引值，否则返回-1 语法：字符串序列.find(子串, 开始位置下标, 结束位置下标) 示例： print(mystr.find('and')) # 12 print(mystr.find('and', 15, 30)) # 23 print(mystr.find('ands')) # -1 , ands子串不存在 rfind 作用：类似于 find() 函数，不过是从右边开始查找 语法：字符串序列.rfind(子串, 开始位置下标, 结束位置下标) index 作用：跟 find() 方法一样，只不过如果str不在 mystr中会报一个异常 语法：字符串序列.index(子串, 开始位置下标, 结束位置下标) 示例： print(mystr.index('and')) # 12 print(mystr.index('and', 15, 30)) # 23 print(mystr.index('ands')) # 如果index查找子串不存在，报错 rindex 作用：类似于 index() 函数，不过是从右边开始查找 语法：字符串序列.rindex(子串, 开始位置下标, 结束位置下标) count 作用：返回 str在start和end之间 在 mystr里面出现的次数 语法：字符串序列.count(子串, 开始位置下标, 结束位置下标) 示例： print(mystr.count('and', 15, 30)) # 1 print(mystr.count('and')) # 3 print(mystr.count('ands')) # 0 6.5.2 修改 mystr = \"hello world and itcast and itheima and Python\" replace 作用：把 mystr 中的 str1 替换成 str2 ,如果 count 指定，则替换不超过 count ，replace函数有返回值，返回值是修改后的字符串 语法：字符串序列.replace(旧子串, 新子串, 替换次数) 示例： new_str = mystr.replace('and', 'he') # hello world he itcast he itheima he Python new_str = mystr.replace('and', 'he', 1) # hello world he itcast and itheima and Python # 替换次数如果超出子串出现的次数，表示替换所有这个子串 new_str = mystr.replace('and', 'he', 10) # hello world he itcast he itheima he Python print(mystr) # hello world and itcast and itheima and Python print(new_str) split 作用：以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串，返回一个列表, 丢失分割字符 语法：字符串序列.split(分割字符, num) 示例：list1 = mystr.split('and') # ['hello world ', ' itcast ', ' itheima ', ' Python'] list1 = mystr.split('and', 2) # ['hello world ', ' itcast ', ' itheima and Python'] print(list1) splitlines 作用：按照行分隔，返回一个包含各行作为元素的列表 语法：字符串序列.splitlines() partition 作用：把mystr以str分割成三部分,str前，str和str后 语法：字符串序列.partition(str) rpartition 作用：类似于 partition()函数,不过是从右边开始 语法：字符串序列.rpartition(str) join 作用：mystr 中每个元素后面插入str,构造出一个新的字符串 语法：字符或子串.join(多字符串组成的序列) 示例： mylist = ['aa', 'bb', 'cc'] str = ' ' str1 = '_' new_str = str.join(mylist) # aa bb cc new_str1 = str1.join(mylist) # aa_bb_cc print(new_str) print(new_str1) capitalize 作用：字符串首字母大写 语法：字符串序列.capitalize() title 作用：字符串中每个单词首字母大写 语法：字符串序列.title() upper 作用：字符串内容全部小写转大写 语法：字符串序列.upper() lower 作用：字符串内容全部大写转小写 语法：字符串序列.lower() lstrip 作用：删除字符串左侧空白字符 语法：字符串序列.lstrip() rstrip 作用：删除字符串右侧空白字符 语法：字符串序列.rstrip() strip 作用：删除字符串两侧空白字符 语法：字符串序列.strip() ljust 作用：返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 语法：字符串序列.ljust(width) rjust 作用：返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 语法：字符串序列.rjust(width) center 作用：返回一个原字符串居中对齐,并使用空格填充至长度 width 的新字符串 语法：字符串序列.center(width) 6.5.3 判断 mystr = \"hello world and itcast and itheima and Python\" startswith 作用：检查字符串是否是以某个子串开头, 是则返回 True，否则返回 False 语法：字符串序列.startswith(子串) endswith 作用：检查字符串是否是以某个子串结尾, 是则返回 True，否则返回 False 语法：字符串序列.endswith(子串) isalpha 作用：如果 mystr 所有字符都是字母，是则返回 True,否则返回 False 语法：字符串序列.isalpha() isdigit 作用：如果 mystr 所有字符都是数字，是则返回 True,否则返回 False 语法：字符串序列.isdigit() isalnum 作用：如果 mystr 所有字符都是数字或字母，是则返回 True,否则返回 False 语法：字符串序列.isalnum() isspace 作用：如果 mystr 所有字符都是空格，是则返回 True,否则返回 False 语法：字符串序列.isspace() "},"article/7-列表.html":{"url":"article/7-列表.html","title":"7 列表","keywords":"","body":"7 列表 7.1 列表介绍 列表的格式 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] 比C语言的数组强大的地方在于列表中的元素可以是不同类型的 testList = [1, 'a'] 打印列表 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] print(namesList[0]) print(namesList[1]) print(namesList[2]) 7.2 列表操作 7.2.1 增 append：通过append可以向列表添加元素 #定义变量A，默认有3个元素 A = ['xiaoWang','xiaoZhang','xiaoHua'] print(\"-----添加之前，列表A的数据-----\") for tempName in A: print(tempName) #提示、并添加元素 temp = input('请输入要添加的学生姓名:') A.append(temp) print(\"-----添加之后，列表A的数据-----\") for tempName in A: print(tempName) 列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据 如果append()追加的数据是一个序列，则追加整个序列到列表 name_list = ['Tom', 'Lily', 'Rose'] name_list.append(['xiaoming', 'xiaohong']) print(name_list) # 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']] extend：通过extend可以将另一个集合中的元素逐一添加到列表中 a = [1, 2] b = [3, 4] a.append(b) # [1, 2, [3, 4]] a.extend(b) # [1, 2, [3, 4], 3, 4] insert：insert(index, object) 在指定位置index前插入元素object a = [0, 1, 2] a.insert(1, 3) # [0, 3, 1, 2] 7.2.2 删 del：根据下标进行删除 movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) del movieName[2] #删除指定数据 # del movieName #删除列表 print('------删除之后------') for tempName in movieName: print(tempName) ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 指环王 霍比特人 速度与激情 pop：删除最后一个元素 movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) movieName.pop() print('------删除之后------') for tempName in movieName: print(tempName) ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 remove：根据元素的值进行删除 movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) movieName.remove('指环王') print('------删除之后------') for tempName in movieName: print(tempName) ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 第一滴血 霍比特人 速度与激情 7.2.3 改 #定义变量A，默认有3个元素 A = ['xiaoWang','xiaoZhang','xiaoHua'] print(\"-----修改之前，列表A的数据-----\") for tempName in A: print(tempName) #修改元素 A[1] = 'xiaoLu' print(\"-----修改之后，列表A的数据-----\") for tempName in A: print(tempName) ~~~py -----修改之前，列表A的数据----- xiaoWang xiaoZhang xiaoHua -----修改之后，列表A的数据----- xiaoWang xiaoLu xiaoHua 7.2.4 查 python中查找的常用方法为：① in（存在）,如果存在那么结果为true，否则为false； ② not in（不存在），如果不存在那么结果为true，否则false #待查找的列表 nameList = ['xiaoWang','xiaoZhang','xiaoHua'] #获取用户要查找的名字 findName = input('请输入要查找的姓名:') #查找是否存在 if findName in nameList: print('在字典中找到了相同的名字') else: print('没有找到') in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在 index：返回指定数据所在位置的下标 a = ['a', 'b', 'c', 'a', 'b'] a.index('a', 1, 3) # 注意是左闭右开区间 Traceback (most recent call last):File \"\", line 1, in ValueError: 'a' is not in list a.index('a', 1, 4) # 3 a.count('b') # 2 a.count('d') # 0 len()：访问列表长度，即列表中数据的个数 name_list = ['Tom', 'Lily', 'Rose'] print(len(name_list)) # 3 7.2.5 排序 sort()：将list按特定顺序重新排列，默认为由小到大，sort方法还有两个可选参数：key 和 reverse key在使用时必须提供一个排序过程总调用的函数 reverse实现降序排序，需要提供一个布尔值，参数reverse=True为倒序 a = [1, 4, 2, 3] a.sort() # [1, 2, 3, 4] a.sort(reverse=True) # [4, 3, 2, 1] x = ['mmm', 'mm', 'mm', 'm' ] x.sort(key = len) print(x) # ['m', 'mm', 'mm', 'mmm'] reverse()：将list逆置 a = [1, 4, 2, 3] a.reverse() # [3, 2, 4, 1] 7.2.6 复制 copy movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] movieName2 = movieName.copy() print(movieName2) 7.3 列表循环遍历 for 循环 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] for name in namesList: print(name) xiaoWang xiaoZhang xiaoHua while 循环 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] length = len(namesList) i = 0 while i xiaoWang xiaoZhang xiaoHua 7.4 列表嵌套 类似while循环的嵌套，列表也是支持嵌套的，一个列表中的元素又是一个列表，那么这就是列表的嵌套schoolNames = [['北京大学','清华大学'], ['南开大学','天津大学','天津师范大学'], ['山东大学','中国海洋大学']] 应用：一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配 import random # 定义一个列表用来保存3个办公室 offices = [[],[],[]] # 定义一个列表用来存储8位老师的名字 names = ['A','B','C','D','E','F','G','H'] i = 0 for name in names: index = random.randint(0,2) offices[index].append(name) i = 1 for tempNames in offices: print('办公室%d的人数为:%d'%(i,len(tempNames))) i+=1 for name in tempNames: print(\"%s\"%name,end='') print(\"\\n\") print(\"-\"*20) "},"article/8-元组.html":{"url":"article/8-元组.html","title":"8 元组","keywords":"","body":"8 元组 Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号 元组特点：定义元组使用小括号，且逗号隔开各个数据，数据可以是不同的数据类型 定义元组: aTuple = ('et',77,99.9) bTuple = (10,) 注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为这个数据的数据类型 # 单个数据的元组 t2 = (10,) print(type(t2)) # tuple # 如果单个数据的元组不加逗号 t3 = (10) print(type(t3)) # int 访问元组也是通过下标访问 python中不允许修改元组的数据，包括不能删除其中的元素；但是如果元组里面有列表，修改列表里面的数据则是支持的 tuple2 = (10, 20, ['aa', 'bb', 'cc'], 50, 30) print(tuple2[2]) # 访问到列表 # 结果：(10, 20, ['aaaaa', 'bb', 'cc'], 50, 30) tuple2[2][0] = 'aaaaa' print(tuple2) "},"article/9-字典.html":{"url":"article/9-字典.html","title":"9 字典","keywords":"","body":"9 字典 9.1 字典介绍 创建字典 info = {'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'} 字典和列表一样，也能够存储多个数据 列表中找某个元素时，是根据下标进行的 字典中找某个元素时，是根据'名字'（就是冒号:前面的那个值，例如上面代码中的'name'、'id'、'sex'） 字典的每个元素由2部分组成，键:值。例如 'name':'班长' ,'name'为键，'班长'为值 字典特点： 符号为大括号 数据为键值对形式出现 各个键值对之间用逗号隔开 一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v # 有数据字典 dict1 = {'name': 'Tom', 'age': 20, 'gender': '男'} # 空字典 dict2 = {} dict3 = dict() 根据键访问值 info = {'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'} print(info['name']) # 班长 print(info['address']) #地球亚洲中国北京 若访问不存在的键，则会报错 在我们不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值 age = info.get('age') type(age) # ，'age'键不存在，所以age为None age = info.get('age', 18) # 若info中不存在'age'这个键，就返回默认值18 9.2 字典操作 9.2.1 增 如果在使用 变量名['键'] = 数据 时，这个“键”在字典中不存在，那么就会新增这个元素 info = {'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'} # print('id为:%d'%info['id'])#程序会终端运行，因为访问了不存在的键 newId = input('请输入新的学号') info['id'] = newId print('添加之后的id为:%d'%info['id']) 请输入新的学号188 添加之后的id为: 188 9.2.2 删 del删除指定的元素 info = {'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'} del info['name'] del删除整个字典 info = {'name':'monitor', 'sex':'f', 'address':'China'} del info clear清空整个字典 info = {'name':'monitor', 'sex':'f', 'address':'China'} info.clear() 9.2.3 改 字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改 info = {'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'} newId = input('请输入新的学号') info['id'] = int(newId) 9.2.4 查 除了使用key查找数据，还可以使用get()来获取数据 info = {'name':'吴彦祖','age':18} print(info['age']) # 获取年龄 # print(info['sex']) # 获取不存在的key，会发生异常 print(info.get('sex')) # 获取不存在的key，获取到空的内容，不会出现异常 keys()：查找字典中所有的key，返回一个包含字典所有key的列表 dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} print(dict1.keys()) # dict_keys(['name', 'age', 'gender']) values()：查找字典中所有的value，返回一个包含字典所有value的列表 dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} print(dict1.values()) # dict_values(['TOM', 20, '男']) items()：查找字典中所有的键值对，返回一个包含所有（键，值）元祖的列表 dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} print(dict1.items()) # dict_items([('name', 'TOM'), ('age', 20), ('gender', '男')]) len()：测量字典中，键值对的个数 9.3 字典遍历 遍历字典的key（键） dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} for key in dict1.keys(): print(key) name age gender 遍历字典的value（值） dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} for value in dict1.values(): print(value) TOM 20 男 遍历字典的项（元素） dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} for item in dict1.items(): print(item) ('name', 'TOM') ('age', 20) ('gender', '男') 遍历字典的key-value（键值对） dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'} for key, value in dict1.items(): # print(key) # print(value) # 目标： key=value print(f'{key}={value}') name=TOM age=20 gender=男 "},"article/10-集合.html":{"url":"article/10-集合.html","title":"10 集合","keywords":"","body":"10 集合 10.1 创建集合 创建集合使用 { } 或 set()， 但是如果要创建空集合只能使用 set()，因为 { } 用来创建空字典 s1 = {10, 20, 30, 40, 50} print(s1) # {40, 10, 50, 20, 30} s2 = {10, 30, 20, 40, 30, 20} print(s2) # {40, 10, 20, 30} s3 = set('abcdefg') print(s3) # {'a', 'c', 'b', 'f', 'g', 'e', 'd'} s4 = set() print(type(s4)) # set s5 = {} print(type(s5)) # dict 集合会掉重复数据 集合数据是无序的，故不支持下标 10.2 集合操作 10.2.1 增 add() s1 = {10, 20} s1.add(100) s1.add(10) print(s1) # {100, 10, 20} 因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作 update()：追加的数据是序列 s1.update([10, 20, 30, 40, 50]) print(s1) # {40, 10, 50, 20, 30} # s1.update(100) # 报错 10.2.2 删 remove()：删除集合中的指定数据，如果数据不存在则报错 s1 = {10, 20} s1.remove(10) print(s1) s1.remove(10) # 报错 print(s1) discard()：删除集合中的指定数据，如果数据不存在也不会报错 s1 = {10, 20} s1.discard(10) print(s1) s1.discard(10) print(s1) pop()：随机删除集合中的某个数据，并返回这个数据 s1 = {10, 20, 30, 40, 50} del_num = s1.pop() print(del_num) print(s1) 10.2.3 查 in：判断数据在集合序列 not in：判断数据不在集合序列 s1 = {10, 20, 30, 40, 50} print(10 in s1) print(10 not in s1) "},"article/11-公共方法.html":{"url":"article/11-公共方法.html","title":"11 公共方法","keywords":"","body":"11 公共方法 11.1 公共运算符 运算符 描述 支持的容器类型 + 合并 字符串、列表、元组 * 复制 字符串、列表、元组 in 元素是否存在 字符串、列表、元组、字典 not in 元素是否不存在 字符串、列表、元组、字典 合并+ # 1. 字符串 str1 = 'aa' str2 = 'bb' str3 = str1 + str2 print(str3) # aabb # 2. 列表 list1 = [1, 2] list2 = [10, 20] list3 = list1 + list2 print(list3) # [1, 2, 10, 20] # 3. 元组 t1 = (1, 2) t2 = (10, 20) t3 = t1 + t2 print(t3) # (10, 20, 100, 200) 复制* # 1. 字符串 print('-' * 10) # ---------- # 2. 列表 list1 = ['hello'] print(list1 * 4) # ['hello', 'hello', 'hello', 'hello'] # 3. 元组 t1 = ('world',) print(t1 * 4) # ('world', 'world', 'world', 'world') in 或not in # 1. 字符串 print('a' in 'abcd') # True print('a' not in 'abcd') # False # 2. 列表 list1 = ['a', 'b', 'c', 'd'] print('a' in list1) # True print('a' not in list1) # False # 3. 元组 t1 = ('a', 'b', 'c', 'd') print('aa' in t1) # False print('aa' not in t1) # True 11.2 公共方法 函数 描述 len() 计算容器中元素个数 del 或 del() 删除 max() 返回容器中元素最大值 min() 返回容器中元素最小值 range(start, end, step) 生成从start到end的数字，步长为 step，供for循环使用 enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中 len() # 1. 字符串 str1 = 'abcdefg' print(len(str1)) # 7 # 2. 列表 list1 = [10, 20, 30, 40] print(len(list1)) # 4 # 3. 元组 t1 = (10, 20, 30, 40, 50) print(len(t1)) # 5 # 4. 集合 s1 = {10, 20, 30} print(len(s1)) # 3 # 5. 字典 dict1 = {'name': 'Rose', 'age': 18} print(len(dict1)) # 2 del() # 1. 字符串 str1 = 'abcdefg' del str1 print(str1) # 2. 列表 list1 = [10, 20, 30, 40] del(list1[0]) print(list1) # [20, 30, 40] max() # 1. 字符串 str1 = 'abcdefg' print(max(str1)) # g # 2. 列表 list1 = [10, 20, 30, 40] print(max(list1)) # 40 min() # 1. 字符串 str1 = 'abcdefg' print(min(str1)) # a # 2. 列表 list1 = [10, 20, 30, 40] print(min(list1)) # 10 range()：range()生成的序列不包含end数字 for i in range(1, 10, 1): print(i) # 1 2 3 4 5 6 7 8 9 for i in range(1, 10, 2): print(i) # 1 3 5 7 9 for i in range(10): print(i) # 0 1 2 3 4 5 6 7 8 9 enumerate()：enumerate(可遍历对象, start=0)，start参数用来设置遍历数据的下标的起始值，默认为0 list1 = ['a', 'b', 'c', 'd', 'e'] for i in enumerate(list1): print(i) for index, char in enumerate(list1, start=1): print(f'下标是{index}, 对应的字符是{char}') (0, 'a') (1, 'b') (2, 'c') (3, 'd') (4, 'e') 下标是1, 对应的字符是a 下标是2, 对应的字符是b 下标是3, 对应的字符是c 下标是4, 对应的字符是d 下标是5, 对应的字符是e 11.3 容器类型转换 tuple()：将某个序列转换成元组 list1 = [10, 20, 30, 40, 50, 20] s1 = {100, 200, 300, 400, 500} print(tuple(list1)) print(tuple(s1)) list()：将某个序列转换成列表 t1 = ('a', 'b', 'c', 'd', 'e') s1 = {100, 200, 300, 400, 500} print(list(t1)) print(list(s1)) set()：将某个序列转换成集合 list1 = [10, 20, 30, 40, 50, 20] t1 = ('a', 'b', 'c', 'd', 'e') print(set(list1)) print(set(t1)) 集合可以快速完成列表去重 集合不支持下标 11.4 推导式 11.4.1 列表推导式 作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。列表推导式又叫列表生成式 格式： [表达式 for 变量 in 列表] [out_exp_res for out_exp in input_list] [表达式 for 变量 in 列表 if 条件] [out_exp_res for out_exp in input_list if condition] out_exp_res：列表生成元素表达式，可以是有返回值的函数 for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中 if condition：条件语句，可以过滤列表中不符合条件的值 需求：创建一个 0-10 的列表 while循环实现 # 1. 准备一个空列表 list1 = [] # 2. 书写循环，依次追加数字到空列表list1中 i = 0 while i for循环实现 list1 = [] for i in range(10): list1.append(i) print(list1) 列表推导式实现list1 = [i for i in range(10)] print(list1) 带if的列表推导式 需求：创建0-10的偶数列表 range()步长实现list1 = [i for i in range(0, 10, 2)] print(list1) if实现list1 = [i for i in range(10) if i % 2 == 0] print(list1) 多个for循环实现列表推导式 需求：创建列表[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] 代码实现list1 = [(i, j) for i in range(1, 3) for j in range(3)] print(list1) 11.4.2 字典推导式 字典推导式作用：快速合并列表为字典或提取字典中目标数据 创建一个字典：字典key是1-5数字，value是这个数字的2次方 dict1 = {i: i**2 for i in range(1, 5)} print(dict1) # {1: 1, 2: 4, 3: 9, 4: 16} 将两个列表合并为一个字典 list1 = ['name', 'age', 'gender'] list2 = ['Tom', 20, 'man'] dict1 = {list1[i]: list2[i] for i in range(len(list1))} print(dict1) 提取字典中目标数据 counts = {'MBP': 268, 'HP': 125, 'DELL': 201, 'Lenovo': 199, 'acer': 99} # 需求：提取上述电脑数量大于等于200的字典数据 count1 = {key: value for key, value in counts.items() if value >= 200} print(count1) # {'MBP': 268, 'DELL': 201} 11.4.3 集合推导式 需求：创建一个集合，数据为下方列表的2次方 list1 = [1, 1, 2] 代码如下： list1 = [1, 1, 2] set1 = {i ** 2 for i in list1} print(set1) # {1, 4} 集合有数据去重功能 "},"article/12-函数.html":{"url":"article/12-函数.html","title":"12 函数","keywords":"","body":"12 函数 12.1 函数介绍 如果在开发程序时，需要某块代码多次，但是为了提高编写的效率以及代码的重用，所以把具有独立功能的代码块组织为一个小模块，这就是函数 定义函数 def 函数名(): 代码 # 定义一个函数，能够完成打印信息的功能 def printInfo(): print('------------------------------------') print(' 人生苦短，我用Python') print('------------------------------------') 调用函数 定义了函数之后，就相当于有了一个具有某些功能的代码，想要让这些代码能够执行，需要调用它调用函数很简单的，通过 函数名() 即可完成调用# 定义完函数后，函数是不会自动执行的，需要调用它才可以 printInfo() 注意： 每次调用函数时，函数都会从头开始执行，当这个函数中的代码执行完毕后，意味着调用结束了 当然了如果函数中执行到了return也会结束函数 12.2 函数的参数 定义带有参数的函数 def add2num(a, b): c = a+b print c 调用带有参数的函数 def add2num(a, b): c = a+b print c add2num(11, 22) # 调用带有参数的函数时，需要在小括号中，传递数据 调用带有参数函数的运行过程： 12.2.1 位置参数 位置参数：调用函数时根据函数定义的参数位置来传递参数 def user_info(name, age, gender): print(f'您的名字是{name}, 年龄是{age}, 性别是{gender}') user_info('TOM', 20, '男') 注意：传递和定义参数的顺序及个数必须一致 12.2.2 关键字参数 关键字参数：通过“键=值”形式加以指定，可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求 def user_info(name, age, gender): print(f'您的名字是{name}, 年龄是{age}, 性别是{gender}') user_info('Rose', age=20, gender='女') user_info('小明', gender='男', age=16) 注意：函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序 12.2.3 缺省参数 缺省参数：调用函数时，缺省参数的值如果没有传入，则取默认值 def printinfo(name, age=35): # 打印任何传入的字符串 print(\"name: %s\" % name) print(\"age %d\" % age) # 调用printinfo函数 printinfo(name=\"miki\") # 在函数执行过程中 age去默认值35 printinfo(age=9 ,name=\"miki\") name: miki age: 35 name: miki age: 9 在形参中默认有值的参数，称之为缺省参数 注意：带有默认值的参数一定要位于参数列表的最后面，否则会报错 def printinfo(name, age=35, sex): print name File \"\", line 1 SyntaxError: non-default argument follows default argument 12.2.4 不定长参数 不定长参数：有时可能需要一个函数能处理比当初声明时更多的参数, 这些参数叫做不定长参数，声明时不会命名 def functionname([formal_args,] *args, **kwargs): \"\"\"函数_文档字符串\"\"\" function_suite return [expression] 加了星号（*）的变量args会存放所有未命名的变量参数，args为元组 而加**的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典def fun(a, b, *args, **kwargs): \"\"\"可变参数演示示例\"\"\" print(\"a =%d\" % a) print(\"b =%d\" % b) print(\"args:\") print(args) print(\"kwargs: \") for key, value in kwargs.items(): print(\"key=%s\" % value) fun(1, 2, 3, 4, 5, m=6, n=7, p=8) # 注意传递的参数对应 a = 1 b = 2 args: (3, 4, 5) kwargs: p = 8 m = 6 n = 7 缺省参数在*args后面 def sum_nums_3(a, *args, b=22, c=33, **kwargs): print(a) print(b) print(c) print(args) print(kwargs) sum_nums_3(100, 200, 300, 400, 500, 600, 700, b=1, c=2, mm=800, nn=900) 100 1 2 (200, 300, 400, 500, 600, 700) {'mm': 800, 'nn': 900} 如果很多个值都是不定长参数，那么这种情况下，可以将缺省参数放到 args的后面， 但如果有**kwargs的话，`*kwargs`必须是最后的 12.3 函数的返回值 带有返回值的函数 def add2num(a, b): c = a+b return c 保存函数的返回值 # 定义函数 def add2num(a, b): return a+b # 调用函数，顺便保存函数的返回值 result = add2num(100,98) # 因为result已经保存了add2num的返回值，所以接下来就可以使用了 print(result) 一个函数中可以有多个return语句，但是只要有一个return语句被执行到，那么这个函数就会结束了，因此后面的return没有什么用处 def create_nums(): print(\"---1---\") return 1 # 函数中下面的代码不会被执行，因为return除了能够将数据返回之外，还有一个隐藏的功能：结束函数 print(\"---2---\") return 2 print(\"---3---\") 如果程序设计为如下，是可以的因为不同的场景下执行不同的return def create_nums(num): print(\"---1---\") if num == 100: print(\"---2---\") return num+1 # 函数中下面的代码不会被执行，因为return除了能够将数据返回之外，还有一个隐藏的功能：结束函数 else: print(\"---3---\") return num+2 print(\"---4---\") result1 = create_nums(100) print(result1) # 打印101 result2 = create_nums(200) print(result2) # 打印202 一个函数返回多个数据的方式 def divid(a, b): shang = a//b yushu = a%b return shang, yushu #默认是元组 result = divid(5, 2) print(result) # 输出(2, 1) def function(): # return [1, 2, 3] # return (1, 2, 3) return {\"num1\": 1, \"num2\": 2, \"num3\": 3} return后面可以是元组，列表、字典等，只要是能够存储多个数据的类型，就可以一次性返回多个数据；如果return后面有多个数据，那么默认是元组 12.4 局部变量和全局变量 局部变量：就是在函数内部定义的变量 其作用范围是这个函数内部，即只能在这个函数中使用，在函数的外部是不能使用的 因为其作用范围只是在自己的函数内部，所以不同的函数可以定义相同名字的局部变量（打个比方，把你、我是当做成函数，把局部变量理解为每个人手里的手机，你可有个iPhone8，- 我当然也可以有个iPhone8了， 互不相关） 局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储 当函数调用时，局部变量被创建，当函数调用完成后这个变量就不能够使用了 全局变量：在函数外边定义的变量叫做全局变量 全局变量能够在所有的函数中进行访问 当函数内出现局部变量和全局变量相同名字时，函数内部中的 变量名 = 数据 此时理解为定义了一个局部变量，而不是修改全局变量的值 修改全局变量 a = 100 print(a) def testA(): print(a) def testB(): # a = 200 # 如果直接修改a=200，此时的a是全局a还是局部a？ -- 得到结论：这个a是局部变量 # # 因为在全局位置(B函数调用后)打印a得到的不是200而是100 # print(a) # 想要修改全局变量a，值是200 global a # 声明a为全局变量 a = 200 print(a) testA() testB() 如果在函数中出现global 全局变量的名字 那么这个函数中即使出现和全局变量名相同的变量名 = 数据 也理解为对全局变量进行修改，而不是定义局部变量 如果在一个函数中需要对多个全局变量进行修改，那么可以使用 # 可以使用一次global对多个全局变量进行声明 global a, b # 还可以用多次global声明都是可以的 # global a # global b 12.5 拆包 拆包时要注意，需要拆的数据的个数要与变量的个数相同，否则程序会异常 除了对元组拆包之外，还可以对列表、字典等拆包 # 1. 拆包元组数据 def return_num(): return 100, 200 result = return_num() print(result) num1, num2 = return_num() print(num1) print(num2) # 2. 字典数据拆包: 变量存储的数据是key值 # 先准备字典，然后拆包 dict1 = {'name': 'TOM', 'age': 20} # dict1中有两个键值对，拆包的时候用两个变量接收数据 a, b = dict1 print(a) print(b) # v值 print(dict1[a]) print(dict1[b]) (100, 200) 100 200 name age TOM 20 交换2个变量的值 # 第1种方式 a = 4 b = 5 c = 0 c = a a = b b = c # 第2种方式 a = 4 b = 5 a = a+b # a=9, b=5 b = a-b # a=9, b=4 a = a-b # a=5, b=4 # 第3种方式 a, b = 4, 5 a, b = b, a 12.6 引用 在python中，值是靠引用来传递来的，我们可以用id()来判断两个变量是否为同一个值的引用。 我们可以将id值理解为那块内存的地址标示 a = 1 b = a id(a) # 13033816 id(b) # 13033816 # 注意两个变量的id值相同 a = 2 # 注意a的id值已经变了 id(a) # 13033792 # b的id值依旧 id(b) # 13033816 a = [1, 2] b = a id(a) # 139935018544808 id(b) # 139935018544808 a.append(3) # a=[1, 2, 3] id(a) # 139935018544808 id(b) # 139935018544808 # 注意a与b始终指向同一个地址 Python中函数参数是引用传递（注意不是值传递） 对于不可变类型，因变量不能修改，所以运算不会影响到变量自身 而对于可变类型来说，函数体中的运算有可能会更改传入的参数变量 可变和不可变类型 所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变 可变类型有： 列表、字典、集合 不可变类型有： 数字、字符串、元组 12.7 函数的文档说明 定义函数的说明文档 def 函数名(参数): \"\"\" 说明文档的位置 \"\"\" 代码 ...... 查看函数的说明文档 help(函数名) def sum_num1(a, b): \"\"\" 求和函数sum_num1 :param a: 参数1 :param b: 参数2 :return: 返回值 \"\"\" return a + b help(sum_num1) Help on function sum_num1 in module __main__: sum_num1(a, b) 求和函数sum_num1 :param a: 参数1 :param b: 参数2 :return: 返回值 12.8 递归函数 如果一个函数在内部不调用其它的函数，而是自己本身的话，这个函数就是递归函数 举个例子，我们来计算阶乘 n! = 1 2 3 ... n 阶乘的规律1! = 1 2! = 2 × 1 = 2 × 1! 3! = 3 × 2 × 1 = 3 × 2! 4! = 4 × 3 × 2 × 1 = 4 × 3! ... n! = n × (n-1)! 解决办法1:循环 解决办法2:递归 原理 总结 函数内部自己调用自己 必须有终止条件(即必须有出口) 12.9 匿名函数 12.9.1 匿名函数介绍 定义的函数没有名字,这样的函数叫做匿名函数 语法结构: lambda [形参1], [形参2], ... : [单行表达式] 或 [函数调用] 使用匿名函数, 上面的函数我们就可以定义为单行的函数# 不带参数 my_fun = lambda : 10 + 20 # 带参数 my_add = lambda a, b: a + b my_add() 注意： lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用 lambda表达式能接收任何数量的参数但只能返回一个表达式的值 匿名函数和普通函数的区别 匿名函数中不能使用 while 循环、for 循环, 只能编写单行的表达式，或函数调用, 普通函数都可以 匿名函数中返回结果不需要使用 return, 表达式的运行结果就是返回结果, 普通函数返回结果必须 return 匿名函数中也可以不返回结果. 例如: lambda : print('hello world') 定义简单的单行函数 普通函数：def my_function(a, b): return a + b 匿名函数：my_function = lambda a, b: a + b 12.9.2 匿名函数的参数 无参数 fn1 = lambda: 100 print(fn1()) 一个参数 fn1 = lambda a: a print(fn1('hello world')) 默认参数 fn1 = lambda a, b, c=100: a + b + c print(fn1(10, 20)) 可变参数：*args fn1 = lambda *args: args print(fn1(10, 20, 30)) 注意：这里的可变参数传入到lambda之后，返回值为元组 可变参数：**kwargs fn1 = lambda **kwargs: kwargs print(fn1(name='python', age=20)) 12.9.3 匿名函数的应用 匿名函数做为函数参数 def my_function(func): a = 100 b = 200 # 把 cucalate_rule 当做函数来调用 result = func(a, b) print('result:', result) my_function(lambda a, b: a / b) my_function(lambda a, b: a // b) my_function(lambda a, b: a % b) 函数可以做为参数传递给另外一个函数, 可以使得函数的实现更加通用 匿名函数也可以作为参数传递给另外一个函数, 对于只需要用到一次函数, 可以通过匿名函数减少代码量 带判断的lambda fn1 = lambda a, b: a if a > b else b print(fn1(1000, 500)) 列表数据按字典key的值排序 students = [ {'name': 'TOM', 'age': 20}, {'name': 'ROSE', 'age': 19}, {'name': 'Jack', 'age': 22} ] # 按name值升序排列 students.sort(key=lambda x: x['name']) print(students) # 按name值降序排列 students.sort(key=lambda x: x['name'], reverse=True) print(students) # 按age值升序排列 students.sort(key=lambda x: x['age']) print(students) 12.10 高阶函数 12.10.1 高阶函数介绍 把函数作为参数传入，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式 def sum_num(a, b, f): return f(a) + f(b) result = sum_num(-1, 2, abs) print(result) # 3 12.10.2 内置高阶函数 map(function, list)：会根据提供的函数对指定序列做映射，第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表 # 计算每一个元素的平方值 my_list = [1, 2, 3, 4, 5] def f(x): return x ** 2 result = map(f, my_list) print(type(result), result, list(result)) # [1, 4, 9, 16, 25] # 首字母大写 my_list = ['smith', 'edward', 'john', 'obama', 'tom'] def f(x): return x[0].upper() + x[1:] result = map(f, my_list) print(list(result)) # ['Smith', 'Edward', 'John', 'Obama', 'Tom'] reduce(function, list)：函数会对参数序列中元素进行累计，函数将一个数据集合中的所有数据进行下列操作:① 用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作；② 得到的结果继续和序列的下一个元素做累积计算， 最终得到一个结果 # 计算列表中的累加和 import functools my_list = [1, 2, 3, 4, 5] def f(x1, x2): return x1 + x2 result = functools.reduce(f, my_list) print(result) # 15 filter()：函数用于过滤序列， 过滤掉不符合条件的元素， 返回一个 filter 对象， 如果要转换为列表， 可以使用 list() 来转换。filter() 接收两个参数， 第一个为函数， 第二个为序列， 序列的每个元素作为参数传递给函数进行判断， 然后返回 True 或 False， 最后将返回 True 的元素放到新列表中 # 过滤掉列表中的奇数 my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] def f(x): return x % 2 == 0 result = filter(f, my_list) print(list(result)) # [2, 4, 6, 8, 10] # 过滤掉列表中首字母为小写的单词 my_list = ['edward', 'Smith', 'Obama', 'john', 'tom'] def f(x): return x[0].isupper() result = filter(f, my_list) print(list(result)) # ['Smith', 'Obama'] "},"article/13-文件操作.html":{"url":"article/13-文件操作.html","title":"13 文件操作","keywords":"","body":"13 文件操作 13.1 文件介绍 什么是文件？ 文件属于文件的一种，与普通文件载体不同，文件是以硬盘为载体存储在计算机上的信息集合 文件可以是文本文档、图片、程序等等。文件通常具有点+三个字母的文件扩展名，用于指示文件类型（例如，图片文件常常以JPEG格式保存并且文件扩展名为.jpg） 文件的作用 就是把一些内容(数据)存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力 13.2 文件打开与关闭 打开文件 open(name, mode) name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径) mode：设置打开文件的模式(访问模式)：只读、写入、追加等f = open('test.txt', 'w') 关闭文件 close() # 新建一个文件，文件名为:test.txt f = open('test.txt', 'w') # 关闭这个文件 f.close() 模式 描述 r 以只读方式打开文件，文件的指针将会放在文件的开头，这是默认模式 rb 以二进制格式打开一个文件用于只读，文件指针将会放在文件的开头，这是默认模式 r+ 打开一个文件用于读写，文件指针将会放在文件的开头 rb+ 以二进制格式打开一个文件用于读写，文件指针将会放在文件的开头 w 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件 wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件 w+ 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件 wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件 a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入 ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入 a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写 ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写 13.3 文件读写 13.3.1 写数据 使用write()可以完成向文件写入数据 新建一个文件 file_write_test.py,向其中写入如下代码: f = open('test.txt', 'w') f.write('hello world, i am here!') f.close() 运行之后会在 file_write_test.py 文件所在的路径中创建一个文件test.txt，并写入上述内容 注意： w 和 a 模式：如果文件不存在则创建该文件；如果文件存在，w 模式先清空再写入，a 模式直接末尾追加 r 模式：如果文件不存在则报错 13.3.2 读数据 read(num)：使用read(num)可以从文件中读取数据，num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据 f = open('test.txt', 'r') content = f.read(5) # 最多读取5个数据 print(content) print(\"-\"*30) # 分割线，用来测试 content = f.read() # 从上次读取的位置继续读取剩下的所有的数据 print(content) f.close() # 关闭文件，这个可以是个好习惯哦 hello ------------------------------ world, i am here! 如果用 open 打开文件时，如果使用的 \"r\" ，那么可以省略，即只写 open('test.txt') readlines()：就像read没有参数时一样，readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素 f = open('test.txt', 'w') for i in range(5): f.write('hello world, i am here!') f.write('\\n') f = open('test.txt', 'r') content = f.readlines() print(type(content)) print(content) i = 1 for temp in content: print(\"%d:%s\" % (i, temp)) i += 1 f.close() ['hello world, i am here!\\n', 'hello world, i am here!\\n', 'hello world, i am here!\\n', 'hello world, i am here!\\n', 'hello world, i am here!\\n'] 1:hello world, i am here! 2:hello world, i am here! 3:hello world, i am here! 4:hello world, i am here! 5:hello world, i am here! readlines()：就像read没有参数时一样，readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素 f = open('test.txt', 'w') for i in range(5): f.write('hello world, i am here!') f.write('\\n') f = open('test.txt', 'r') content = f.readlines() print(type(content)) print(content) i = 1 for temp in content: print(\"%d:%s\" % (i, temp)) i += 1 f.close() ['hello world, i am here!\\n', 'hello world, i am here!\\n', 'hello world, i am here!\\n', 'hello world, i am here!\\n', 'hello world, i am here!\\n'] 1:hello world, i am here! 2:hello world, i am here! 3:hello world, i am here! 4:hello world, i am here! 5:hello world, i am here! readline()：一次读取一行内容 f = open('test.txt', 'r') content = f.readline() print(\"1:%s\" % content) content = f.readline() print(\"2:%s\" % content) f.close() 1:hello world, i am here! 2:hello world, i am here! 13.4 文件定位读写 13.4.1 获取当前读写的位置 在读写文件的过程中，如果想知道当前的位置，可以使用tell()来获取 # 打开一个已经存在的文件 f = open('test.txt', 'r') str = f.read(3) print(\"读取的数据是 :%s \" % str) # 查找当前位置 position = f.tell() print(\"当前文件位置 :%d \" % position) str = f.read(3) print(\"读取的数据是 :%s \" % str) # 查找当前位置 position = f.tell() print(\"当前文件位置 : %d\" % position) f.close() 读取的数据是 :hel 当前文件位置 :3 读取的数据是 :lo 当前文件位置 : 6 13.4.2 定位到某个位置 如果在读写文件的过程中，需要从另外一个位置进行操作的话，可以使用seek() seek(offset, from)有2个参数 offset:偏移量 from:方向 0:表示文件开头 1:表示当前位置 2:表示文件末尾 把位置设置为：从文件开头，偏移5个字节 # 打开一个已经存在的文件 f = open(\"test.txt\", \"r\") str = f.read(10) print(\"读取的数据是 :%s \" % str) # 查找当前位置 position = f.tell() print(\"当前文件位置 :%d\" % position) # 重新设置位置 f.seek(5,0) # 查找当前位置 position = f.tell() print(\"当前文件位置 :%d \" % position) str = f.read(3) print(\"读取的数据是 :%s \" % str) f.close() 读取的数据是 :hello worl 当前文件位置 :10 当前文件位置 :5 读取的数据是 : wo 把位置设置为：离文件末尾，3字节处 # 在文本文件中，没有使用b模式选项打开的文件，只允许从文件头开始计算相对位置，从文件尾计算时就会引发异常 f = open(\"test.txt\", \"rb\") str = f.read(10) print(\"读取的数据是 :%s \" % str) # 查找当前位置 position = f.tell() print(\"当前文件位置 :%d\" % position) # 重新设置位置 f.seek(-3, 2) # 查找当前位置 position = f.tell() print(\"当前文件位置 :%d \" % position) str = f.read(3) print(\"读取的数据是 :%s \" % str) f.close() 读取的数据是 :'hello worl' 当前文件位置 :10 当前文件位置 :120 读取的数据是 :'re!' 13.5 文件操作 13.5.1 文件重命名 os模块中的rename()可以完成对文件的重命名操作 rename(需要修改的文件名, 新的文件名) import os os.rename(\"毕业论文.txt\", \"毕业论文-最终版.txt\") 13.5.2 删除文件 remove(待删除的文件名) import os os.remove(\"毕业论文.txt\") 13.5.3 创建文件夹 mkdir(文件夹名称) import os os.mkdir(\"张三\") 13.5.4 获取当前目录 getcwd() import os os.getcwd() 13.5.5 改变默认目录 chdir(\"../\") import os os.chdir(\"../\") 13.5.6 获取目录列表 listdir(\"./\") import os os.listdir(\"./\") 13.5.7 删除文件夹 os.rmdir(要删除的文件夹名称) import os os.rmdir(\"张三\") 13.6 综合应用 13.6.1 制作文件的备份 输入文件的名字，然后程序自动完成对文件进行备份 # 提示输入文件 oldFileName = input(\"请输入要拷贝的文件名字:\") # 以读的方式打开文件 oldFile = open(oldFileName,'rb') # 提取文件的后缀 fileFlagNum = oldFileName.rfind('.') if fileFlagNum > 0: fileFlag = oldFileName[fileFlagNum:] # 组织新的文件名字 newFileName = oldFileName[:fileFlagNum] + '[复件]' + fileFlag # 创建新文件 newFile = open(newFileName, 'wb') # 把旧文件中的数据，一行一行的进行复制到新文件中 for lineContent in oldFile.readlines(): newFile.write(lineContent) # 关闭文件 oldFile.close() newFile.close() 13.6.2 批量修改文件名 批量修改文件名，既可添加指定字符串，又能删除指定字符串 # 批量在文件名前加前缀 import os funFlag = 1 # 1表示添加标志 2表示删除标志 folderName = './renameDir/' # 获取指定路径的所有文件名字 dirList = os.listdir(folderName) # 遍历输出所有文件名字 for name in dirList: print name if funFlag == 1: newName = '[Python]-' + name elif funFlag == 2: num = len('[Python]-') newName = name[num:] print newName os.rename(folderName+name, folderName+newName) "},"article/14-面向对象.html":{"url":"article/14-面向对象.html","title":"14 面向对象","keywords":"","body":"14 面向对象 14.1 面向对象编程介绍 如今主流的软件开发思想有两种：一个是面向过程，另一个是面向对象。面向过程出现得较早，典型代表为C语言，开发中小型项目的效率很高，但是很难适用于如今主流的大中型项目开发场景。面向对象则出现得更晚一些，典型代表为Java或C++等语言，更加适合用于大型开发场景。两种开发思想各有长短 对于面向过程的思想： 需要实现一个功能的时候,看重的是开发的步骤和过程,每一个步骤都需要自己亲力亲为,需要自己编写代码(自己来做) 对于面向对象的思想：当需要实现一个功能的时候,看重的并不是过程和步骤,而是关心谁帮我做这件事(偷懒,找人帮我做) 面向对象的三大特征有：封装性、继承性、多态性 14.2 类和对象 14.2.1 类和对象介绍 面向对象编程的2个非常重要的概念：类和对象。对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念——类 面向对象的语言当中，“类”就是用来模拟现实事物的。那么模拟现实世界的事物通常从两方面模拟： 属性：事物的特征描述信息，用于描述某个特征“是什么” 行为：事物的能力行动方案，用于说明事物“能做什么” 类中也有属性、行为两个组成部分，而“对象”是类的具体实例。例如： 类：抽象的，是一张“手机设计图” 对象：具体的，是一个“真正的手机实例” 对象：某一个具体事物的存在 ,在现实世界中可以是看得见摸得着的 类和对象之间的关系：类就是创建对象的模板 类的构成： 类的名称：类名 类的属性：一组数据 类的方法：允许对进行操作的方法 (行为) 14.2.2 定义类 定义一个类，格式如下： class 类名: 方法列表 # class Hero: # 经典类（旧式类）定义形式 # class Hero(): class Hero(object): # 新式类定义形式 def info(self): print(\"英雄各有见，何必问出处。\") 说明： 定义类时有2种形式：新式类和经典类，上面代码中的Hero为新式类，前两行注释部分则为经典类； object 是Python 里所有类的最顶级父类； 类名 的命名规则按照\"大驼峰命名法\"； info 是一个实例方法，第一个参数一般是self，表示实例对象本身，当然了可以将self换为其它的名字，其作用是一个变量 这个变量指向了实例对象 14.2.3 创建对象 14.3 对象属性操作 14.4 魔法方法 14.5 继承 14.6 子类重写父类属性和方法 14.7 super 方法 14.8 多态 14.8 多态 "}}